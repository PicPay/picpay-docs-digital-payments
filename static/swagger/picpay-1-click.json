{
  "openapi": "3.0.3",
  "x-stoplight": {
    "id": "9wxuk7cbwz0ek"
  },
  "info": {
    "title": "PicPay 1-Click",
    "description": "# Introdução\nA API do PicPay 1-Click foi desenvolvida \ncom base na tecnologia REST, seguindo os atuais padrões \ntécnicos de mercado. Todas as URLs utilizam o protocolo \nHTTP como autenticação, verbos e códigos de retorno.\n\n## Autenticação e Autorização\nToda a comunicação utiliza tokens para autorização, em \nconformidade com as especificações do OpenID Connect e \nOAuth 2.0. Os tokens são criados a partir da autenticação \ncom as credenciais fornecidas pelo PicPay, e da autorização \ndo usuário, como mostrado no nosso guia.\n",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/v1"
    }
  ],
  "paths": {
    "/payments/charge": {
      "post": {
        "summary": "Criar cobrança",
        "description": "Este recurso permite ao vendedor realizar uma cobrança na carteira do usuário.",
        "operationId": "charge",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewTransactionCreatedData"
                }
              }
            }
          },
          "401": {
            "description": "Erros com seu Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Token inválido.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Resposta quando o recurso é chamado sem o acess_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Access Token expirado",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Resposta quando o recurso é chamado com um token que não é um JWT válido.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Resposta para erros de validação",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro inesperado no servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Pagamentos"
        ]
      }
    },
    "/payments/{transaction_id}/refund": {
      "post": {
        "summary": "Realizar um estorno total ou parcial",
        "description": "Este recurso permite ao vendedor realize o estorno total ou parcial de um pagamento. \nCaso você especifique um valor de rembolso menor do que foi cobrado, a transação  original será cancelada e faremos uma segunda cobrança na carteira do usuário  com o valor da diferença.",
        "operationId": "refund",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transaction_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reembolso total ou parcial realizado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Erros com seu Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Token inválido.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Resposta quando o recurso é chamado sem o acess_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Access Token expirado",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Resposta quando o recurso é chamado com um token que não é um JWT válido.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Resposta para erros de validação",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro inesperado no servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Pagamentos"
        ]
      }
    },
    "/v1/sandbox/payments/charge": {
      "post": {
        "summary": "Criar cobrança",
        "description": "Este recurso permite ao vendedor simular uma realização de cobrança na carteira do usuário.",
        "operationId": "Sandbox Charge",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxChargeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewTransactionCreatedData"
                }
              }
            }
          },
          "401": {
            "description": "Erros com seu Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Token inválido.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Resposta quando o recurso é chamado sem o acess_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Access Token expirado",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Resposta quando o recurso é chamado com um token que não é um JWT válido.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Resposta para erros de validação",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro inesperado no servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Pagamentos"
        ]
      }
    },
    "/v1/sandbox/payments/{transaction_id}/refund": {
      "post": {
        "summary": "Realizar um estorno total ou parcial",
        "description": "Este recurso permite ao vendedor realize o estorno total ou parcial de um pagamento. \nCaso você especifique um valor de rembolso menor do que foi cobrado, a transação  original será cancelada e faremos uma segunda cobrança na carteira do usuário  com o valor da diferença.",
        "operationId": "Sandbox Refund",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transaction_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Reembolso total ou parcial realizado com sucesso.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Erros com seu Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Token inválido.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Resposta quando o recurso é chamado sem o acess_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Access Token expirado",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Resposta quando o recurso é chamado com um token que não é um JWT válido.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Resposta para erros de validação",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro inesperado no servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Pagamentos"
        ]
      }
    },
    "/payments/{reference_id}": {
      "get": {
        "summary": "Consultar uma cobrança",
        "description": "Este recurso permite a busca das informações de um determinado pagamento, através do transaction_id e/ou\n reference_id. É necessário passar o transaction_id ou reference_id obrigatoriamente.",
        "operationId": "find",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "reference_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Busca realizada com sucesso",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindPaymentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Erros com seu Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Token inválido.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Resposta quando o recurso é chamado sem o acess_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Access Token expirado",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Resposta quando o recurso é chamado com um token que não é um JWT válido.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Resposta para erros de validação",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidFindNullInput"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Erro inesperado no servidor",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Pagamentos"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Authorization": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "ChargeRequestBody": {
        "title": "Criar cobrança",
        "type": "object",
        "x-examples": {
          "Cobrar R$ 99,99 da carteira do cliente.": {
            "value": 99.99,
            "reference_id": "dfecee7e-2414-4966-8911-104f6389b070"
          }
        },
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99,
            "description": "Valor em reais a ser combrado do cliente."
          },
          "reference_id": {
            "type": "string",
            "example": "dfecee7e-2414-4966-8911-104f6389b071",
            "description": "Identificador único do pagamento no parceiro."
          }
        },
        "required": [
          "value"
        ]
      },
      "RefundRequestBody": {
        "title": "Realizar um reembolso",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          }
        }
      },
      "RefundResponseBody": {
        "title": "Reembolso realizado parcialmente",
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "description": "Identificador da transação cancelada, ou da nova transação criada para os casos de ao reembolso parcial.",
            "example": "123456222"
          },
          "created_at": {
            "type": "string",
            "example": "2020-04-16 20:59:58",
            "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$"
          }
        }
      },
      "SandboxRequestBody": {
        "title": "Reembolsar cobrança",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          },
          "testScenery": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "GRAND_VALUE",
              "TRANSACTION_NOT_FOUND",
              "INTERNAL_SERVER_ERROR",
              "EXPIRED_TOKEN",
              "MISSING_TOKEN"
            ]
          }
        }
      },
      "SandboxChargeRequestBody": {
        "title": "Criar cobrança",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          },
          "testScenery": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "INTERNAL_SERVER_ERROR",
              "EXPIRED_TOKEN",
              "MISSING_TOKEN"
            ]
          }
        }
      },
      "NewTransactionCreatedData": {
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "description": "Identificador da transação criada.",
            "example": "123456222"
          },
          "created_at": {
            "type": "string",
            "example": "2020-04-16 20:59:58",
            "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$"
          }
        }
      },
      "UnprocessableEntityResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The given data was invalid."
          },
          "errors": {
            "type": "object",
            "properties": {
              "field": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "message"
                }
              }
            }
          },
          "business_code": {
            "type": "string",
            "example": "INVALID_INPUT"
          }
        }
      },
      "ChargeTooManyRequestsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "API rate limit exceeded"
          }
        }
      },
      "InternalServerErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "format": "string",
            "example": "Ops! Ocorreu um erro inesperado ao processar a sua solicitação."
          },
          "business_code": {
            "type": "string",
            "format": "string",
            "example": "INTERNAL_ERROR"
          }
        }
      },
      "TransactionNotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Transaction not found"
          },
          "business_code": {
            "type": "string",
            "example": "TRANSACTION_NOT_FOUND"
          }
        }
      },
      "InvalidFindNullInput": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "É necessário informar o reference_id ou transaction_id."
          },
          "business_code": {
            "type": "string",
            "example": "INVALID_INPUT"
          }
        }
      },
      "FindTooManyRequestsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "API rate limit exceeded"
          }
        }
      },
      "FindPaymentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-29T19:25:34-03:00"
          },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-29T19:25:34-03:00"
          },
          "value": {
            "type": "integer",
            "example": 2.10
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "example": 2.10
          },
          "status": {
            "type": "string"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-29T19:25:34-03:00"
          },
          "transactionId": {
            "type": "string"
          }
        }
      }
    }
  }
}