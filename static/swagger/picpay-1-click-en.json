{
  "openapi": "3.0.3",
  "x-stoplight": {
    "id": "9wxuk7cbwz0ek"
  },
  "info": {
    "title": "PicPay 1-Click",
    "description": "# Introduction\nA API do PicPay 1-Click was developed \ncom based on REST technology, following current standard \ntechnical of market. All the URLs use the protocol \nHTTP  as authentication,  verbs and return codes.\n\n## AUTHENTICATION AND AUTHORIZATION\nAll communication uses tokens for authorization, in \ncompliance withOpenID Connect and \nOAuth 2.0 specifications. The tokens are created from authentication \nwith the credentials provided by PicPay, and from \nuser authorization as shown in our guide.\n",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/v1"
    }
  ],
  "paths": {
    "/payments/charge": {
      "post": {
        "summary": "Create billing",
        "description": "This feature allows the seller to charge in the user's wallet.",
        "operationId": "charge",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewTransactionCreatedData"
                }
              }
            }
          },
          "401": {
            "description": "Error with your Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without access_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with token that invalid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Response to validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/{transaction_id}/refund": {
      "post": {
        "summary": "Perform a full or partial reversal",
        "description": "This resource allows the seller to make a total or partial reversal of a payment. \nIf you specify a refund amount lower than was charged, the original transaction will be canceled and we will make a second charge to the user's wallet with the difference amount.‚Äù This resource allows the seller to make a total or partial reversal of a payment. \nIf you specify a refund amount lower than what was charged, the original transaction will be canceled and we will make a second charge to the user's wallet with the difference amount.",


        "operationId": "refund",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transaction_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Full or partial refund successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Errors with Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without acess_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with token that invalid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Response for validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/v1/sandbox/payments/charge": {
      "post": {
        "summary": "Create billing",
        "description": "This feature allows the seller to simulate charging the user's wallet.",
        "operationId": "Sandbox Charge",
        "security": [
          {
            "Authorization": []
          }      ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxChargeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewTransactionCreatedData"
                }
              }
            }
          },
          "401": {
            "description": "Access Token Erros",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without access_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token.",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with token that invalid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Response validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/v1/sandbox/payments/{transaction_id}/refund": {
      "post": {
        "summary": "Perform a full or partial reversal",
        "description": "This resource allows the seller to make a total or partial reversal of a payment. \nIf you specify a refund amount lower than was charged, the original transaction will be canceled and we will make a second charge to the user's wallet with the difference amount.",
        "operationId": "Sandbox Refund",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transaction_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Full or partial refund successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Errors with your Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without access_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with a token that is not a valid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Response for validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Authorization": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "ChargeRequestBody": {
        "title": "Create billing",
        "type": "object",
        "x-examples": {
          "Charge BRL 99.99 from the customer's wallet.": {
            "value": 99.99,
            "reference_id": "dfecee7e-2414-4966-8911-104f6389b070"
          }
        },
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99,
            "description": "Amount in BRL to be charged to the customer."
          },
          "reference_id": {
            "type": "string",
            "example": "dfecee7e-2414-4966-8911-104f6389b071",
            "description": "Unique payment identifier at partner."
          }
        },
        "required": [
          "value"
        ]
      },
      "RefundRequestBody": {
        "title": "Make a refund",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          }
        }
      },
      "RefundResponseBody": {
        "title": "Partially paid refund",
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "description": "Identifier of the canceled transaction, or of the new transaction created for cases of partial refund.",
            "example": "123456222"
          },
          "created_at": {
            "type": "string",
            "example": "2020-04-16 20:59:58",
            "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$"
          }
        }
      },
      "SandboxRequestBody": {
        "title": "Refund charge",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          },
          "testScenery": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "GRAND_VALUE",
              "TRANSACTION_NOT_FOUND",
              "INTERNAL_SERVER_ERROR",
              "EXPIRED_TOKEN",
              "MISSING_TOKEN"
            ]
          }
        }
      },
      "SandboxChargeRequestBody": {
        "title": "Create billing",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          },
          "testScenery": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "INTERNAL_SERVER_ERROR",
              "EXPIRED_TOKEN",
              "MISSING_TOKEN"
            ]
          }
        }
      },
      "NewTransactionCreatedData": {
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "description": "Identifier of the created transaction.",
            "example": "123456222"
          },
          "created_at": {
            "type": "string",
            "example": "2020-04-16 20:59:58",
            "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$"
          }
        }
      },
      "UnprocessableEntityResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The given data was invalid."
          },
          "errors": {
            "type": "object",
            "properties": {
              "field": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "message"
                }
              }
            }
          },
          "business_code": {
            "type": "string",
            "example": "INVALID_INPUT"
          }
        }
      },
      "ChargeTooManyRequestsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "API rate limit exceeded"
          }
        }
      },
      "InternalServerErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "format": "string",
            "example": "Oops! An unexpected error occurred while processing your request."
          },
          "business_code": {
            "type": "string",
            "format": "string",
            "example": "INTERNAL_ERROR"
          }
        }
      },
      "TransactionNotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Transaction not found"
          },
          "business_code": {
            "type": "string",
            "example": "TRANSACTION_NOT_FOUND"
          }
        }
      }
    }
  }
}

