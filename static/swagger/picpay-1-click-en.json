{
  "openapi": "3.0.3",
  "x-stoplight": {
    "id": "9wxuk7cbwz0ek"
  },
  "info": {
    "title": "PicPay 1-Click",
    "description": "# Introduction\nA API do PicPay 1-Click was developed \ncom based on REST model, following current standard \ntechnical of market. All the URLs use the protocol \nHTTP  as authentication,  verbs and return codes.\n\n## AUTHENTICATION AND AUTHORIZATION\nAll communication uses tokens for authorization, in \ncompliance withOpenID Connect and \nOAuth 2.0 specifications. The tokens are created from authentication \nwith the credentials provided by PicPay, and from \nuser authorization as shown in our guide.\n",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/v1"
    }
  ],
  "paths": {
    "/payments/charge": {
      "post": {
        "summary": "Charge Create",
        "description": "This feature enables the seller to charge the user's wallet. If the seller chooses to confirm the amount after the customer's authorization, \nit is necessary to send the parameter `auto_capture` with the value `false`, indicating that the authorized amount will only be temporarily reserved (delayed capture).\n If the `auto_capture` parameter is not specified, it will automatically assume the value `true`, following the automatic capture flow.\n For more details on how the `capture` endpoint works, refer to [_Capture Charge_](#operations-Payments-cancelPayment).",
        "operationId": "charge",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewTransactionCreatedData"
                }
              }
            }
          },
          "401": {
            "description": "Error with your Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without access_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with token that invalid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestTimeoutResponse"
                }
              }
            }
          },
          "422": {
            "description": "Response to validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/cancel": {
      "post": {
        "summary": "Performs cancellation of an uncaptured transaction.",
        "description": "This feature allows the seller to cancel an authorized transaction awaiting capture.\nFor orders with authorized payments awaiting capture, it is possible to cancel the transaction in advance, always for the total amount, as long as the waiting period is within 5 days of the capture request. This prevents any possibility of charge and makes the consumer's balance available for new purchases.\n\nTwo possible identifiers can be used: `transaction_id` or `reference_id`. The `transaction_id` is PicPay's identifier returned in a successful charge. The `reference_id` is the identifier generated by the partner and sent in the charge request. At least one of the identifiers **needs** to be sent. When both are sent, both will be validated.",
        "operationId": "cancelPayment",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CancelRequestWithBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cancellation successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/CancelResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Errors with your Access Token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when the resource is called without the access token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when the resource is called with a token that is not a valid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionCantBeCancel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/capture": {
      "post": {
        "summary": "Capture Charge",
        "description": "\nThe payment capture, whether partial or total, is performed under the condition that the transaction is \ncreated with the `auto_capture` field set to `false` and the consumer has made the payment. \nA request will be awaited to finalize the charge, with the correct value indicated in the `value` field. \nThe value can be equal to or less than the authorized amount. If the `value` field is not provided, the transaction will be captured for the total amount. \nCaptures with a value higher than the authorized amount will be \nrejected.\n\n\n**Information:**\n- Capture request is only allowed when the transaction is authorized. In the event that the \ncapture request does not occur within 5 calendar days from authorization, the transaction is automatically canceled. \n\n- After a successful capture, even if partial, it will not be possible to request\na new capture of the same transaction.\n\nTwo possible identifiers can be used: `transaction_id` or `reference_id`. The `transaction_id` is PicPay's identifier returned in a successful charge. The `reference_id` is the identifier generated by the partner and sent in the charge request. At least one of the identifiers **needs** to be sent. When both are sent, both will be validated.",
        "operationId": "capture",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CaptureRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "No Content"
          },
          "401": {
            "description": "Errors with your Access Token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when the resource is called without the access token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when the resource is called with a token that is not a valid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionCaptureInvalidValue"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionCantBeCaptured"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/{transaction_id}/refund": {
      "post": {
        "deprecated": true,
        "summary": "Perform a full or partial refund",
        "description": "This resource allows the seller to make a total or partial reversal of a payment. \nIf you specify a refund amount lower than was charged, the original transaction will be canceled and we will make a second charge to the user's wallet with the difference amount.” This resource allows the seller to make a total or partial reversal of a payment. \nIf you specify a refund amount lower than what was charged, the original transaction will be canceled and we will make a second charge to the user's wallet with the difference amount.",
        "operationId": "refund",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transaction_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Full or partial refund successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Errors with Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without acess_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with token that invalid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Response for validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/refund": {
      "post": {
        "summary": "Perform a full or partial refund",
        "description": "This resource allows the seller to perform a full or partial refund of a payment. If you specify a refund amount less than the amount charged, a partial refund of the transaction will be processed. If the `value` field is not provided, the transaction will be refunded for the total amount.\n\nTwo possible identifiers can be used: `transaction_id` or `reference_id`. The `transaction_id` is PicPay's identifier returned in a successful charge. The `reference_id` is the identifier generated by the partner and sent in the charge request. At least one of the identifiers **needs** to be sent. When both are sent, both will be validated.",
        "operationId": "refund with body",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequestWithPayloadBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Full or partial refund successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Errors with Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without acess_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with token that invalid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Response for validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments": {
      "get": {
        "summary": "Find a charge",
        "description": "This resource allows the search for a charge through an identifier.\n\nTwo possible identifiers can be used: `transaction_id` or `reference_id`. The `transaction_id` is PicPay's identifier returned in a successful charge. The `reference_id` is the identifier generated by the partner and sent in the charge request. At least one of the identifiers **needs** to be sent. When both are sent, both will be validated.",
        "operationId": "find",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "reference_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "transaction_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Find performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindPaymentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error with your Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without access_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with token that invalid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Response to validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidFindNullInput"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/sandbox/payments/charge": {
      "post": {
        "summary": "Charge Create",
        "description": "This feature enables the seller to charge the user's wallet. If the seller chooses to confirm the amount after the customer's authorization, \nit is necessary to send the parameter `auto_capture` with the value `false`, indicating that the authorized amount will only be temporarily reserved (delayed capture).\n If the `auto_capture` parameter is not specified, it will automatically assume the value `true`, following the automatic capture flow.\n For more details on how the `capture` endpoint works, refer to [_Capture Charge_](#operations-Sandbox-SandboxCancel).",
        "operationId": "Sandbox Charge",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxChargeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewTransactionCreatedData"
                }
              }
            }
          },
          "401": {
            "description": "Access Token Erros",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without access_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token.",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with a invalid JWT token.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Response validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Sandbox"
        ]
      }
    },
    "/sandbox/payments/cancel": {
      "post": {
        "summary": "Perform the cancellation of an uncaptured transaction.",
        "description": "This feature allows the seller to cancel an authorized transaction awaiting capture.\nFor orders with authorized payments awaiting capture, it is possible to cancel the transaction in advance, always for the total amount, as long as the waiting period is within 5 days of the capture request. This prevents any possibility of charge and makes the consumer's balance available for new purchases.\n\nTwo possible identifiers can be used: `transaction_id` or `reference_id`. The `transaction_id` is PicPay's identifier returned in a successful charge. The `reference_id` is the identifier generated by the partner and sent in the charge request. At least one of the identifiers **needs** to be sent. When both are sent, both will be validated.",
        "operationId": "SandboxCancel",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxCancelRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Cancellation successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Error with your Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when the resource is called without the access token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when the resource is called with a token that is not a valid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionCantBeCancel"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Sandbox"
        ]
      }
    },
    "/sandbox/payments/capture": {
      "post": {
        "summary": "Capture Charge",
        "description": "\nThe payment capture, whether partial or total, is performed under the condition that the transaction is \ncreated with the `auto_capture` field set to `false` and the consumer has made the payment. \nA request will be awaited to finalize the charge, with the correct value indicated in the `value` field. \nThe value can be equal to or less than the authorized amount. If the `value` field is not provided, the transaction will be captured for the total amount. \nCaptures with a value higher than the authorized amount will be \nrejected.\n\n\n**Information:**\n- Capture request is only allowed when the transaction is authorized. In the event that the \ncapture request does not occur within 5 calendar days from authorization, the transaction is automatically canceled. \n\n- After a successful capture, even if partial, it will not be possible to request\na new capture of the same transaction.\n\nTwo possible identifiers can be used: `transaction_id` or `reference_id`. The `transaction_id` is PicPay's identifier returned in a successful charge. The `reference_id` is the identifier generated by the partner and sent in the charge request. At least one of the identifiers **needs** to be sent. When both are sent, both will be validated.",
        "operationId": "Sandbox Capture",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxCaptureRequestBody"
              }
            }
          }
        },
        "responses": {
          "204": {
            "description": "Ok"
          },
          "401": {
            "description": "Errors with your Access Token.",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when the resource is called without the access token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when the resource is called with a token that is not a valid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "406": {
            "description": "Not Acceptable",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionCaptureInvalidValue"
                }
              }
            }
          },
          "409": {
            "description": "Conflict",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionCantBeCaptured"
                }
              }
            }
          },
          "422": {
            "description": "Validation Error Response.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected Server Error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Sandbox"
        ]
      }
    },
    "/sandbox/payments/{transaction_id}/refund": {
      "post": {
        "deprecated": true,
        "summary": "Perform a full or partial reversal",
        "description": "This resource allows the seller to make a total or partial reversal of a payment. \nIf you specify a refund amount lower than was charged, the original transaction will be canceled and we will make a second charge to the user's wallet with the difference amount.",
        "operationId": "Sandbox Refund",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transaction_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Full or partial refund successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Errors with your Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without access_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with a token that is not a valid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Response for validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Sandbox"
        ]
      }
    },
    "/sandbox/payments/refund": {
      "post": {
        "summary": "Perform a full or partial refund",
        "description": "This resource allows the seller to perform a full or partial refund of a payment. If you specify a refund amount less than the amount charged, a partial refund of the transaction will be processed. If the `value` field is not provided, the transaction will be refunded for the total amount.\n\nTwo possible identifiers can be used: `transaction_id` or `reference_id`. The `transaction_id` is PicPay's identifier returned in a successful charge. The `reference_id` is the identifier generated by the partner and sent in the charge request. At least one of the identifiers **needs** to be sent. When both are sent, both will be validated.",
        "operationId": "sandbox refund with body",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxRefundRequestWithPayloadBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Full or partial refund successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Errors with Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without acess_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with token that invalid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Response for validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Sandbox"
        ]
      }
    },
    "/sandbox/payments": {
      "get": {
        "summary": "Find a charge",
        "description": "This resource allows the search for a charge through an identifier.\n\nTwo possible identifiers can be used: `transaction_id` or `reference_id`. The `transaction_id` is PicPay's identifier returned in a successful charge. The `reference_id` is the identifier generated by the partner and sent in the charge request. At least one of the identifiers **needs** to be sent. When both are sent, both will be validated.",
        "operationId": "Sandbox Find",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "reference_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "transaction_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "testScenery",
            "description": "default: SUCCESS",
            "schema": {
              "type": "string",
              "enum": [
                "SUCCESS",
                "SUCCESS_REFUNDED",
                "SUCCESS_PARTIALLY_REFUNDED",
                "INTERNAL_SERVER_ERROR",
                "NOT_FOUND"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Find performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindPaymentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error with your Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without access_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with token that invalid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Response to validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidFindNullInput"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Sandbox"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Authorization": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "ChargeRequestBody": {
        "title": "Charge Create",
        "type": "object",
        "x-examples": {
          "Charge BRL 99.99 from the customer's wallet.": {
            "value": 99.99,
            "reference_id": "dfecee7e-2414-4966-8911-104f6389b070"
          }
        },
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99,
            "description": "Amount in BRL to be charged to the customer."
          },
          "reference_id": {
            "type": "string",
            "example": "dfecee7e-2414-4966-8911-104f6389b071",
            "description": "Partner unique payment identifier."
          },
          "auto_capture": {
            "type": "boolean",
            "example": true,
            "description": "Identifies the capture type, default is true."
          }
        },
        "required": [
          "value"
        ]
      },
      "CaptureRequestBody": {
        "title": "Capturar cobrança",
        "type": "object",
        "x-examples": {
          "Capturar R$ 99,99 da carteira do cliente.": {
            "value": 99.99,
            "reference_id": "dfecee7e-2414-4966-8911-104f6389b070",
            "transaction_id": "bdc7bfd7-98bc-4910-801e-99206076947d"
          }
        },
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99,
            "description": "Amount in Brazilian Reais to be charged from the customer."
          },
          "reference_id": {
            "type": "string",
            "example": "dfecee7e-2414-4966-8911-104f6389b071",
            "description": "Partner unique payment identifier."
          },
          "transaction_id": {
            "type": "string",
            "example": "bdc7bfd7-98bc-4910-801e-99206076947d",
            "description": "Identifier of the created transaction."
          }
        }
      },
      "RefundRequestBody": {
        "title": "Make a refund",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          }
        }
      },
      "RefundRequestWithPayloadBody": {
        "title": "Make a refund with transaction_id or reference_id",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          },
          "transaction_id": {
            "type": "string",
            "description": "Identifier of the created transaction.",
            "example": "4e0124b4-4a13-48a5-9c6b-abb348a6cf4d"
          },
          "reference_id": {
            "type": "string",
            "description": "Partner unique payment identifier.",
            "example": "e1648cb6-06f2-4b59-9c4a-fcd3a25a7b47"
          }
        }
      },
      "CancelRequestWithBody": {
        "title": "Perform a cancellation.",
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "example": "57e8b5af-d42b-42a4-9d5e-181aacf1ee9e"
          },
          "reference_id": {
            "type": "string",
            "example": "61b19b5c-0cd2-4cb9-931a-c797bb8b9222"
          }
        }
      },
      "CancelResponseBody": {
        "title": "Partial refund successfully processed.",
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "description": "Identifier of the canceled transaction.",
            "example": "e1648cb6-06f2-4b59-9c4a-fcd3a25a7b47"
          },
          "reference_id": {
            "type": "string",
            "description": "Partner unique payment identifier.",
            "example": "4e0124b4-4a13-48a5-9c6b-abb348a6cf4d"
          },
          "created_at": {
            "type": "string",
            "example": "2020-04-16 20:59:58",
            "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$"
          }
        }
      },
      "SandboxRefundRequestWithPayloadBody": {
        "title": "Make a refund with transaction_id or reference_id",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          },
          "transaction_id": {
            "type": "string",
            "description": "Identifier of the created transaction.",
            "example": "4e0124b4-4a13-48a5-9c6b-abb348a6cf4d"
          },
          "reference_id": {
            "type": "string",
            "description": "Partner unique payment identifier.",
            "example": "4e0124b4-4a13-48a5-9c6b-abb348a6cf4d"
          },
          "test_case": {
            "type": "string",
            "description": "default: SUCCESS",
            "enum": [
              "SUCCESS",
              "GRAND_VALUE",
              "TRANSACTION_NOT_FOUND",
              "INTERNAL_SERVER_ERROR",
              "EXPIRED_TOKEN",
              "MISSING_TOKEN"
            ]
          }
        }
      },
      "SandboxCancelRequestBody": {
        "title": "Cancelar uma transação.",
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "example": "4e0124b4-4a13-48a5-9c6b-abb348a6cf4d"
          },
          "reference_id": {
            "type": "string",
            "example": "4e0124b4-4a13-48a5-9c6b-abb348a6cf4d"
          },
          "test_case": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "TRANSACTION_NOT_FOUND",
              "INVALID_STATUS",
              "INTERNAL_SERVER_ERROR",
              "EXPIRED_TOKEN",
              "MISSING_TOKEN"
            ]
          }
        }
      },
      "SandboxCaptureRequestBody": {
        "title": "Capturar cobrança",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          },
          "transaction_id": {
            "type": "string",
            "example": "50cb987b-5073-4da4-85be-6f15e49b7f12"
          },
          "reference_id": {
            "type": "string",
            "example": "4e0124b4-4a13-48a5-9c6b-abb348a6cf4d"
          },
          "test_case": {
            "type": "string",
            "enum": [
              "SUCCESS",
              "GRAND_VALUE",
              "INVALID_STATUS",
              "TRANSACTION_NOT_FOUND",
              "EXPIRED_TOKEN",
              "MISSING_TOKEN",
              "INTERNAL_SERVER_ERROR"
            ]
          }
        }
      },
      "RefundResponseBody": {
        "title": "Partially Refunded",
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "description": "Identifier of the canceled transaction, or of the new transaction created for cases of partial refund.",
            "example": "4e0124b4-4a13-48a5-9c6b-abb348a6cf4d"
          },
          "reference_id": {
            "type": "string",
            "description": "Unique payment identifier in the partner.",
            "example": "4e0124b4-4a13-48a5-9c6b-abb348a6cf4d"
          },
          "created_at": {
            "type": "string",
            "example": "2020-04-16 20:59:58",
            "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$"
          }
        }
      },
      "SandboxRequestBody": {
        "title": "Charge Refund",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          },
          "test_case": {
            "type": "string",
            "description": "default: SUCCESS",
            "enum": [
              "SUCCESS",
              "GRAND_VALUE",
              "TRANSACTION_NOT_FOUND",
              "INTERNAL_SERVER_ERROR",
              "EXPIRED_TOKEN",
              "MISSING_TOKEN"
            ]
          }
        }
      },
      "SandboxChargeRequestBody": {
        "title": "Create charge",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          },
          "reference_id": {
            "type": "string",
            "description": "Unique payment identifier in the partner.",
            "example": "dfecee7e-2414-4966-8911-104f6389b071"
          },
          "auto_capture": {
            "type": "boolean",
            "example": true,
            "description": "Identifies the capture type, default is true."
          },
          "test_case": {
            "type": "string",
            "description": "default: SUCCESS",
            "enum": [
              "SUCCESS",
              "INTERNAL_SERVER_ERROR",
              "EXPIRED_TOKEN",
              "MISSING_TOKEN"
            ]
          }
        }
      },
      "NewTransactionCreatedData": {
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "description": "Identifier of the created transaction.",
            "example": "4e0124b4-4a13-48a5-9c6b-abb348a6cf4d"
          },
          "reference_id": {
            "type": "string",
            "description": "Unique payment identifier in the partner.",
            "example": "4e0124b4-4a13-48a5-9c6b-abb348a6cf4d"
          },
          "created_at": {
            "type": "string",
            "example": "2020-04-16 20:59:58",
            "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$"
          }
        }
      },
      "UnprocessableEntityResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The given data was invalid."
          },
          "errors": {
            "type": "object",
            "properties": {
              "field": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "message"
                }
              }
            }
          },
          "business_code": {
            "type": "string",
            "example": "INVALID_INPUT"
          }
        }
      },
      "ChargeTooManyRequestsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "API rate limit exceeded"
          }
        }
      },
      "InternalServerErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "format": "string",
            "example": "Oops! An unexpected error occurred while processing your request."
          },
          "business_code": {
            "type": "string",
            "format": "string",
            "example": "INTERNAL_ERROR"
          }
        }
      },
      "TransactionNotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Transaction not found"
          },
          "business_code": {
            "type": "string",
            "example": "TRANSACTION_NOT_FOUND"
          }
        }
      },
      "InvalidFindNullInput": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "It is necessary to inform the reference_id or transaction_id."
          },
          "business_code": {
            "type": "string",
            "example": "INVALID_INPUT"
          }
        }
      },
      "RequestTimeoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Request took too long to process."
          },
          "business_code": {
            "type": "string",
            "example": "REQUEST_TIMEOUT"
          }
        }
      },
      "FindTooManyRequestsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "API rate limit exceeded"
          }
        }
      },
      "FindPaymentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "a97e4225-c697-4416-9ba2-6e7b6ddd127b"
          },
          "reference_id": {
            "type": "string",
            "description": "Partner unique payment identifier.",
            "example": "61b19b5c-0cd2-4cb9-931a-c797bb8b9222"
          },
          "status": {
            "type": "string",
            "description": "- \"AUTHORIZED\": Authorized\n\n - \"EXPIRED\": Expired - Occurs when the transaction is authorized and is not captured within the 5 calendar day period.\n\n- \"CANCELLED\": Cancelled\n\n- \"PAID\": Paid\n\n- \"PARTIALLY_REFUNDED\": Partially refunded\n\n- \"REFUNDED\": Refunded\n\n- \"ERROR\": Error\n",
            "enum": [
              "AUTHORIZED",
              "EXPIRED",
              "CANCELLED",
              "PAID",
              "PARTIALLY_REFUNDED",
              "REFUNDED",
              "ERROR"
            ],
            "example": "PARTIALLY_REFUNDED"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-29T19:25:34-03:00",
             "description": "Format ISO 8601"
          },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-29T19:25:34-03:00",
             "description": "Format ISO 8601"
          },
          "value": {
            "type": "number",
            "format": "float",
            "example": 2.52
          },
          "refunded_value": {
            "type": "number",
            "format": "float",
            "example": 3.23
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 10.95
          },
          "status": {
            "type": "string",
            "description": "- \"AUTHORIZED\": Authorized\n\n - \"EXPIRED\": Expired - Occurs when the transaction is authorized and is not captured within the 5 calendar day period.\n\n- \"CANCELLED\": Cancelled\n\n- \"PAID\": Paid\n\n- \"PARTIALLY_REFUNDED\": Partially refunded\n\n- \"REFUNDED\": Refunded\n\n- \"ERROR\": Error\n",
            "enum": [
              "AUTHORIZED",
              "EXPIRED",
              "CANCELLED",
              "PAID",
              "PARTIALLY_REFUNDED",
              "REFUNDED",
              "ERROR"
            ],
            "example": "PARTIALLY_REFUNDED"
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-29T19:25:34-03:00",
            "description": "Format ISO 8601"
          },
          "id": {
            "type": "string",
            "example": "61b19b5c-0cd2-4cb9-931a-c797bb8b9222"
          },
          "refunds": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Refunds"
            }
          },
          "captured_value": {
            "type": "number",
            "format": "float",
            "example": 5.75
          },
          "captured_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-29T19:25:34-03:00"
          }
        }
      },
      "Refunds": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string",
            "example": "09950d4a-2df4-4d60-9cbc-ac8f004fa595"
          },
          "value": {
            "type": "number",
            "format": "float",
            "example": 3.23
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-29T19:25:34-03:00",
            "description": "Format ISO 8601"
          }
        }
      },
      "TransactionCantBeCaptured": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Transaction has invalid status for capture."
          },
          "business_code": {
            "type": "string",
            "example": "TRANSACTION_CANT_BE_CAPTURED"
          }
        }
      },
      "TransactionCantBeCancel": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Transaction has invalid status for cancellation."
          },
          "business_code": {
            "type": "string",
            "example": "TRANSACTION_CANT_BE_CANCELLED"
          }
        }
      },
      "TransactionCaptureInvalidValue": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Captured value is invalid."
          },
          "business_code": {
            "type": "string",
            "example": "CAPTURED_INVALID_VALUE"
          }
        }
      }
    }
  }
}