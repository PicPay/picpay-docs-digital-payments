{
  "openapi": "3.0.3",
  "x-stoplight": {
    "id": "9wxuk7cbwz0ek"
  },
  "info": {
    "title": "PicPay 1-Click",
    "description": "# Introduction\nA API do PicPay 1-Click was developed \ncom based on REST model, following current standard \ntechnical of market. All the URLs use the protocol \nHTTP  as authentication,  verbs and return codes.\n\n## AUTHENTICATION AND AUTHORIZATION\nAll communication uses tokens for authorization, in \ncompliance withOpenID Connect and \nOAuth 2.0 specifications. The tokens are created from authentication \nwith the credentials provided by PicPay, and from \nuser authorization as shown in our guide.\n",
    "version": "1.0.0"
  },
  "servers": [
    {
      "url": "/v1"
    }
  ],
  "paths": {
    "/payments/charge": {
      "post": {
        "summary": "Billing Create",
        "description": "This feature allows the seller to charge in the user's wallet.",
        "operationId": "charge",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChargeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewTransactionCreatedData"
                }
              }
            }
          },
          "401": {
            "description": "Error with your Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without access_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with token that invalid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "408": {
            "description": "Request Timeout",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RequestTimeoutResponse"
                }
              }
            }
          },
          "422": {
            "description": "Response to validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/{transaction_id}/refund": {
      "post": {
        "summary": "Perform a full or partial refund",
        "description": "This resource allows the seller to make a total or partial reversal of a payment. \nIf you specify a refund amount lower than was charged, the original transaction will be canceled and we will make a second charge to the user's wallet with the difference amount.‚Äù This resource allows the seller to make a total or partial reversal of a payment. \nIf you specify a refund amount lower than what was charged, the original transaction will be canceled and we will make a second charge to the user's wallet with the difference amount.",
        "operationId": "refund",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transaction_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Full or partial refund successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Errors with Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without acess_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with token that invalid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Response for validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments/refund": {
      "post": {
        "summary": "Perform a full or partial refund",
        "description": "This resource allows the seller to make a total or partial reversal of a payment. If you specify a refund amount lower than was charged, the original transaction will be canceled and we will make a second charge to the user's wallet with the difference amount. Two possible identifiers can be used: `transaction_id` or `reference_id`. The `transaction_id` is PicPay's identifier returned in a successful charge. The `reference_id` is the identifier generated by the partner and sent in the charge request. At least one of the identifiers needs to be sent. When both are sent, only the `reference_id` will be considered.",
        "operationId": "refund",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RefundRequestWithPayloadBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Full or partial refund successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Errors with Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without acess_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with token that invalid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Response for validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/sandbox/payments/charge": {
      "post": {
        "summary": "Billing Create",
        "description": "This feature allows the seller to simulate charging the user's wallet.",
        "operationId": "Sandbox Charge",
        "security": [
          {
            "Authorization": []
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxChargeRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Ok",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/NewTransactionCreatedData"
                }
              }
            }
          },
          "401": {
            "description": "Access Token Erros",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without access_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token.",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with a invalid JWT token.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found"
          },
          "422": {
            "description": "Response validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/sandbox/payments/{transaction_id}/refund": {
      "post": {
        "summary": "Perform a full or partial reversal",
        "description": "This resource allows the seller to make a total or partial reversal of a payment. \nIf you specify a refund amount lower than was charged, the original transaction will be canceled and we will make a second charge to the user's wallet with the difference amount.",
        "operationId": "Sandbox Refund",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "path",
            "name": "transaction_id",
            "required": true,
            "schema": {
              "type": "string"
            }
          }
        ],
        "requestBody": {
          "required": true,
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SandboxRequestBody"
              }
            }
          }
        },
        "responses": {
          "200": {
            "description": "Full or partial refund successfully completed.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/RefundResponseBody"
                }
              }
            }
          },
          "401": {
            "description": "Errors with your Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without access_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with a token that is not a valid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Response for validation errors",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/UnprocessableEntityResponse"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ChargeTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/sandbox/payments": {
      "get": {
        "summary": "Find a charge",
        "description": "This resource allows the search for a charge through an identifier. Two possible identifiers can be used: `transaction_id` or `reference_id`. The `transaction_id` is PicPay's identifier returned in a successful charge. The `reference_id` is the identifier generated by the partner and sent in the charge request. At least one of the identifiers needs to be sent. When both are sent, only the `reference_id` will be considered.",
        "operationId": "Sandbox Find",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "reference_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "transaction_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "testScenery",
            "description": "default: SUCCESS",
            "schema": {
              "type": "string",
              "enum": [
                "SUCCESS",
                "SUCCESS_REFUNDED",
                "SUCCESS_PARTIALLY_REFUNDED",
                "INTERNAL_SERVER_ERROR",
                "NOT_FOUND"
              ]
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Find performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindPaymentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error with your Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without access_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with token that invalid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Response to validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidFindNullInput"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    },
    "/payments": {
      "get": {
        "summary": "Find a charge",
        "description": "This resource allows the search for a charge through an identifier. Two possible identifiers can be used: `transaction_id` or `reference_id`. The `transaction_id` is PicPay's identifier returned in a successful charge. The `reference_id` is the identifier generated by the partner and sent in the charge request. At least one of the identifiers needs to be sent. When both are sent, only the `reference_id` will be considered.",
        "operationId": "find",
        "security": [
          {
            "Authorization": []
          }
        ],
        "parameters": [
          {
            "in": "query",
            "name": "reference_id",
            "schema": {
              "type": "string"
            }
          },
          {
            "in": "query",
            "name": "transaction_id",
            "schema": {
              "type": "string"
            }
          }
        ],
        "responses": {
          "200": {
            "description": "Find performed successfully",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindPaymentResponse"
                }
              }
            }
          },
          "401": {
            "description": "Error with your Access Token",
            "content": {
              "application/json": {
                "schema": {
                  "type": "object",
                  "properties": {
                    "message": {
                      "type": "string",
                      "format": "string",
                      "example": "Unauthorized"
                    }
                  }
                },
                "examples": {
                  "InvalidToken": {
                    "description": "Invalid Token.",
                    "value": {
                      "message": "Invalid authentication credentials"
                    }
                  },
                  "tokenNotFound": {
                    "description": "Response when resource is called without access_token.",
                    "value": {
                      "message": "Unauthorized"
                    }
                  },
                  "expiredToken": {
                    "description": "Expired Access Token",
                    "value": {
                      "message": "Token claims invalid: [\"exp\"]=\"token expired\""
                    }
                  },
                  "badTokenFormat": {
                    "description": "Response when resource is called with token that invalid JWT.",
                    "value": {
                      "message": "Bad token; invalid JSON"
                    }
                  }
                }
              }
            }
          },
          "404": {
            "description": "Not Found",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/TransactionNotFound"
                }
              }
            }
          },
          "422": {
            "description": "Response to validation errors.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InvalidFindNullInput"
                }
              }
            }
          },
          "429": {
            "description": "Too Many Requests",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/FindTooManyRequestsResponse"
                }
              }
            }
          },
          "500": {
            "description": "Unexpected server error.",
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/InternalServerErrorResponse"
                }
              }
            }
          }
        },
        "tags": [
          "Payments"
        ]
      }
    }
  },
  "components": {
    "securitySchemes": {
      "Authorization": {
        "type": "http",
        "scheme": "bearer",
        "bearerFormat": "JWT"
      }
    },
    "schemas": {
      "ChargeRequestBody": {
        "title": "Billing Create",
        "type": "object",
        "x-examples": {
          "Charge BRL 99.99 from the customer's wallet.": {
            "value": 99.99,
            "reference_id": "dfecee7e-2414-4966-8911-104f6389b070"
          }
        },
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99,
            "description": "Amount in BRL to be charged to the customer."
          },
          "reference_id": {
            "type": "string",
            "example": "dfecee7e-2414-4966-8911-104f6389b071",
            "description": "Partner unique payment identifier."
          }
        },
        "required": [
          "value"
        ]
      },
      "RefundRequestBody": {
        "title": "Make a refund",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          }
        }
      },
      "RefundRequestWithPayloadBody": {
        "title": "Make a refund",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          },
          "transaction_id": {
            "type": "string",
            "description": "Identifier of the created transaction.",
            "example": "123456222"
          },
          "reference_id": {
            "type": "string",
            "description": "Partner unique payment identifier.",
            "example": "123456222"
          }
        }
      },
      "RefundResponseBody": {
        "title": "Partially Refunded",
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "description": "Identifier of the canceled transaction, or of the new transaction created for cases of partial refund.",
            "example": "123456222"
          },
          "reference_id": {
            "type": "string",
            "description": "Unique payment identifier in the partner.",
            "example": "123456222"
          },
          "created_at": {
            "type": "string",
            "example": "2020-04-16 20:59:58",
            "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$"
          }
        }
      },
      "SandboxRequestBody": {
        "title": "Charge Refund",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          },
          "testScenery": {
            "type": "string",
            "description": "default: SUCCESS",
            "enum": [
              "SUCCESS",
              "GRAND_VALUE",
              "TRANSACTION_NOT_FOUND",
              "INTERNAL_SERVER_ERROR",
              "EXPIRED_TOKEN",
              "MISSING_TOKEN"
            ]
          }
        }
      },
      "SandboxChargeRequestBody": {
        "title": "Create billing",
        "type": "object",
        "properties": {
          "value": {
            "type": "number",
            "format": "float",
            "example": 99.99
          },
          "reference_id": {
            "type": "string",
            "description": "Unique payment identifier in the partner.",
            "example": "dfecee7e-2414-4966-8911-104f6389b071"
          },
          "testScenery": {
            "type": "string",
            "description": "default: SUCCESS",
            "enum": [
              "SUCCESS",
              "INTERNAL_SERVER_ERROR",
              "EXPIRED_TOKEN",
              "MISSING_TOKEN"
            ]
          }
        }
      },
      "NewTransactionCreatedData": {
        "type": "object",
        "properties": {
          "transaction_id": {
            "type": "string",
            "description": "Identifier of the created transaction.",
            "example": "123456222"
          },
          "reference_id": {
            "type": "string",
            "description": "Unique payment identifier in the partner.",
            "example": "123456222"
          },
          "created_at": {
            "type": "string",
            "example": "2020-04-16 20:59:58",
            "pattern": "^\\d{4}-\\d{2}-\\d{2} \\d{2}:\\d{2}:\\d{2}$"
          }
        }
      },
      "UnprocessableEntityResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "The given data was invalid."
          },
          "errors": {
            "type": "object",
            "properties": {
              "field": {
                "type": "array",
                "items": {
                  "type": "string",
                  "example": "message"
                }
              }
            }
          },
          "business_code": {
            "type": "string",
            "example": "INVALID_INPUT"
          }
        }
      },
      "ChargeTooManyRequestsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "API rate limit exceeded"
          }
        }
      },
      "InternalServerErrorResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "format": "string",
            "example": "Oops! An unexpected error occurred while processing your request."
          },
          "business_code": {
            "type": "string",
            "format": "string",
            "example": "INTERNAL_ERROR"
          }
        }
      },
      "TransactionNotFound": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Transaction not found"
          },
          "business_code": {
            "type": "string",
            "example": "TRANSACTION_NOT_FOUND"
          }
        }
      },
      "InvalidFindNullInput": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "It is necessary to inform the reference_id or transaction_id."
          },
          "business_code": {
            "type": "string",
            "example": "INVALID_INPUT"
          }
        }
      },
      "RequestTimeoutResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "Request took too long to process."
          },
          "business_code": {
            "type": "string",
            "example": "REQUEST_TIMEOUT"
          }
        }
      },
      "FindTooManyRequestsResponse": {
        "type": "object",
        "properties": {
          "message": {
            "type": "string",
            "example": "API rate limit exceeded"
          }
        }
      },
      "FindPaymentResponse": {
        "type": "object",
        "properties": {
          "id": {
            "type": "string"
          },
          "reference_id": {
            "type": "string",
            "description": "Partner unique payment identifier."
          },
          "status": {
            "type": "string",
            "description": "- \"refused\"\n\n- \"error\"\n\n- \"refunded\"\n\n- \"cancel\"\n\n- \"approved\"\n\n- \"completed\"\n\n- \"pending\"",
            "enum": [
              "refused",
              "error",
              "refunded",
              "cancel",
              "approved",
              "completed",
              "pending"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-29T19:25:34-03:00",
             "description": "Format ISO 8601"
          },
          "paid_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-29T19:25:34-03:00",
             "description": "Format ISO 8601"
          },
          "value": {
            "type": "integer",
            "example": 2.10
          },
          "transactions": {
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/Transaction"
            }
          }
        }
      },
      "Transaction": {
        "type": "object",
        "properties": {
          "value": {
            "type": "integer",
            "example": 2.10
          },
          "status": {
            "type": "string",
            "description": "- \"refused\"\n\n- \"error\"\n\n- \"refunded\"\n\n- \"cancel\"\n\n- \"approved\"\n\n- \"completed\"\n\n- \"pending\"",
            "enum": [
              "refused",
              "error",
              "refunded",
              "cancel",
              "approved",
              "completed",
              "pending"
            ]
          },
          "created_at": {
            "type": "string",
            "format": "date-time",
            "example": "2023-05-29T19:25:34-03:00",
            "description": "Format ISO 8601"
          },
          "id": {
            "type": "string"
          }
        }
      }
    }
  }
}